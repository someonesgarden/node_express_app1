// Generated by CoffeeScript 1.10.0
(function() {
  var LINK_LEVEL, TARGET_URL, URL, checkSaveDir, client, download, downloadRec, express, fs, http, list, param, path, request, router, savedir, savepath, url, url2;

  express = require('express');

  http = require('http');

  router = express.Router();

  download = require('my/download.coffee').download;

  client = require('cheerio-httpcli');

  URL = require('url');

  request = require('request');

  fs = require('fs');

  path = require('path');

  savedir = "./public/img";

  if (!fs.existsSync(savedir)) {
    console.log(savedir);
    fs.mkdirSync(savedir);
  }

  url = "http://kujirahand.com/";

  savepath = "public/test.html";

  download(url, savepath, function() {
    return console.log("ok, kenji");
  });

  url2 = "https://en.wikipedia.org/wiki/Dog";

  param = {};

  client.fetch(url2, param, function(err, $, res) {
    if (err) {
      console.log("Error:", err);
    }
    return $("img").each(function(idx) {
      var fname, src, src2;
      src = $(this).attr('src');
      if (src != null) {
        src2 = URL.resolve(url2, src);
        console.log(src2);
        fname = URL.parse(src2).pathname;
        fname = savedir + "/" + fname.replace(/[^a-zA^Z0-9\.]+/g, '_');
        return request(src2).pipe(fs.createWriteStream(fname));
      }
    });
  });

  LINK_LEVEL = 3;

  TARGET_URL = "http://nodejs.jp/nodejs.org_ja/docs/v0.10/api/";

  list = {};

  checkSaveDir = function(fname) {
    var d, dir, dirlist, i, j, len, p, results;
    dir = path.dirname(fname);
    dirlist = dir.split("/");
    p = "";
    results = [];
    for (i = j = 0, len = dirlist.length; j < len; i = ++j) {
      d = dirlist[i];
      p += d + "/";
      console.log("p>> " + p);
      if (!fs.existsSync(p)) {
        results.push(fs.mkdirSync(p));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  downloadRec = function(url, level) {
    var base, us;
    if (!(level >= LINK_LEVEL)) {
      if (!list[url]) {
        console.log("YES>> " + url);
        list[url] = true;
        us = TARGET_URL.split("/");
        us.pop();
        base = us.join("/");
        if (!(url.indexOf(base) < 0)) {
          return client.fetch(url, {}, function(err, $, res) {
            $("a").each(function(idx) {
              var href;
              href = $(this).attr('href');
              console.log("before replace>> " + href + "(" + level + ")");
              href = URL.resolve(url, href);
              href = href.replace(/\#.+$/, "");
              console.log("replaced>> " + href + "(" + level + ")");
              return downloadRec(href, level + 1);
            });
            if (url.substr(url.length - 1, 1) === '/') {
              url += "index.html";
            }
            savepath = "/usr/src/app/site/" + url.split("/").splice(2).join("/");
            checkSaveDir(savepath);
            console.log(savepath);
            return fs.writeFileSync(savepath, $.html());
          });
        }
      }
    }
  };

  downloadRec(TARGET_URL, 0);

  console.log("list");

  console.log(list);

  router.get('/', function(req, res) {
    return res.render('index', {
      title: 'TITLE22'
    });
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=index.js.map
