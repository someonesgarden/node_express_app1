// Generated by CoffeeScript 1.10.0
(function() {
  var analyzeRSSbyCheerio, analyzeRSSbyXML2J, normalizePort, onError, op, rd, ss;

  analyzeRSSbyXML2J = function(xml) {
    var parseString, xml2js;
    xml2js = require('xml2js');
    parseString = xml2js.parseString;
    return parseString(xml, function(err, obj) {
      var i, item, items, j, len, results;
      if (err) {
        return console.log(err);
      } else {
        console.log(JSON.stringify(obj));
        items = obj.rss.channel[0].item;
        results = [];
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          results.push(console.log(item.title[0]));
        }
        return results;
      }
    });
  };

  analyzeRSSbyCheerio = function(RSS) {
    var client;
    client = require('cheerio-httpcli');
    return client.fetch(RSS, {}, function(err, $, res) {
      if (err) {
        return console.log("error");
      } else {
        console.log("analyzeRSSByCHerio:");
        return $("item > title").each(function(idx) {
          var title;
          title = $(this).text();
          return console.log(title);
        });
      }
    });
  };

  normalizePort = function(val) {
    var port;
    port = parseInt(val, 10);
    if (isNaN(port)) {
      return val;
    }
    if (port >= 0) {
      return port;
    }
    return false;
  };

  onError = function(error) {
    var bind;
    if (error.syscall !== 'listen') {
      throw error;
    }
    bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        return process.exit(1);
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        return process.exit(1);
      default:
        throw error;
    }
  };

  ss = function(req) {
    if (req.session) {
      return req.session.user = req.body.username;
    }
  };

  rd = function(res, forward) {
    return res.render('login', {
      title: "Terrada ART FLATS",
      forward: forward
    });
  };

  op = function(res, page, t, n, galid, mode, userjsonfound) {
    if (galid == null) {
      galid = 'gallery1';
    }
    if (mode == null) {
      mode = 'edit';
    }
    if (userjsonfound == null) {
      userjsonfound = false;
    }
    return res.render(page, {
      title: t,
      username: n,
      galleryid: galid,
      gallerymode: mode,
      userjsonfound: userjsonfound
    });
  };

  module.exports = {
    'normalizePort': normalizePort,
    'onError': onError,
    'ss': ss,
    'rd': rd,
    'op': op,
    'analyzeRSSbyXML2J': analyzeRSSbyXML2J,
    'analyzeRSSbyCheerio': analyzeRSSbyCheerio
  };

}).call(this);

//# sourceMappingURL=funcs.js.map
